#include <iostream>
using namespace std;
int N = 10; //укажем размер массива


class stack { //создадим класс stack
private: //эти члены класса будут закрытыми:
	int* arr; //сделаем указатель на массив
	int top; //переменная для вершины стека

public: // поскольку эти члены класса stack являются открытыми, то к ним можно получить
	//доступ напрямую из функции main()
	stack() //конструктор без параметров
{
	top = -1;
	arr = new int[N];
}
	  stack(int m) //конструктор с одним параметром
	  {
		  top = -1;
		  arr = new int[m];
	  }
	  ~stack() //деструктор
	  {
		  delete[] arr;
	  }
	  void push(int a) //функция добавления элемента
	  {
		  if (top == N - 1) //значение вершины равно размеру массива(стека)?
			  cout << "Стэк переполнен!!!" << endl;
		  else
		  {
			  top++;
			  arr[top] = a; //увеличиваем значение вершины и кладем это значение в массив
		  }
	  }
	  void pop() //функция извлечения элемента
	  {
		  if (top >= 0) //переменная вершины больше либо равна 0?
		  {
			  cout << arr[top]; //извлекаем значение
			  top--; //уменьшаем значение вершины на 1
		  }
		  else //иначе происходит ошибка
			  cout << "Стэк пуст!!!";
	  }
};

int main() {

	setlocale(LC_ALL, "Russian");

	int znach, r; //укажем логический тип данных для проверки логических условий
	cout << "Сколько будет элементов в стэке: ";
	cin >> N;
	stack one(N);
	do {
		cout << "Для добавление введите 1, для извлечения 0: ";
		cin >> r;
		if (r == 1 || r == 0)
		{
			if (r == 1)
			{
				cout << "Введите значение: ";
				cin >> znach;
				one.push(znach);
			}
			else
			{
				cout << "Значение равно: ";
				one.pop();
				cout << endl;
			}
		}
		else
		{
			cout << "Incorrect input!\nДля добавление введите 1, для извлечения 0: \n";
			cin >> r;
		}
		
	} while (true);
	return 0;
}
